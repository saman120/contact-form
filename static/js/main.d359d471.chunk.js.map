{"version":3,"sources":["components/ContactForm.js","App.js","serviceWorker.js","index.js"],"names":["ContactForm","className","Form","onSubmit","event","preventDefault","userDetail","mailBody","fullName","email","gender","window","confirm","open","sendEmail","target","Group","controlId","Label","Control","type","placeholder","name","key","Check","inline","label","id","Button","variant","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAwDeA,EApCK,WAWlB,OAAO,yBAAKC,UAAU,aACpB,4CACA,kBAACC,EAAA,EAAD,CAAMC,SAZa,SAACC,GACpBA,EAAMC,iBAhBQ,SAACC,GACjB,IAAMC,EAAQ,oDAEiBD,EAAWE,SAF5B,gDAGqBF,EAAWG,MAHhC,yCAIcH,EAAWI,OAJzB,kBAQVC,OAAOC,QAAQ,eACjBD,OAAOE,KAAP,iBAbiB,yBAajB,oBAZY,0BAYZ,iBAA8DN,IAQ9DO,CAAU,CACRN,SAAUJ,EAAMW,OAAOP,SACvBC,MAAOL,EAAMW,OAAON,MACpBC,OAAQN,EAAMW,OAAOL,WAOrB,kBAACR,EAAA,EAAKc,MAAN,CAAYC,UAAU,gBACpB,kBAACf,EAAA,EAAKgB,MAAN,kBACA,kBAAChB,EAAA,EAAKiB,QAAN,CAAcC,KAAK,OAAOC,YAAY,YAAYC,KAAK,cAEzD,kBAACpB,EAAA,EAAKc,MAAN,CAAYC,UAAU,oBACpB,kBAACf,EAAA,EAAKgB,MAAN,sBACA,kBAAChB,EAAA,EAAKiB,QAAN,CAAcC,KAAK,QAAQC,YAAY,cAAcC,KAAK,WAE5D,kBAACpB,EAAA,EAAKc,MAAN,CAAYC,UAAU,cACpB,kBAACf,EAAA,EAAKgB,MAAN,eACA,yBAAKK,IAAI,eAAetB,UAAU,QAChC,kBAACC,EAAA,EAAKsB,MAAN,CAAYC,QAAM,EAACC,MAAM,OAAON,KAAK,QAAQO,GAAG,iBAAiBL,KAAK,WACtE,kBAACpB,EAAA,EAAKsB,MAAN,CAAYC,QAAM,EAACC,MAAM,SAASN,KAAK,QAAQO,GAAG,iBAAiBL,KAAK,aAG5E,kBAACM,EAAA,EAAD,CAAQC,QAAQ,UAAUT,KAAK,UAA/B,a,MCpCSU,MARf,WACE,OACE,yBAAK7B,UAAU,iBACb,kBAAC,EAAD,QCIc8B,QACW,cAA7BpB,OAAOqB,SAASC,UAEe,UAA7BtB,OAAOqB,SAASC,UAEhBtB,OAAOqB,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d359d471.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Form, Button } from 'react-bootstrap';\r\n\r\nconst TARGET_EMAIL = 'samanacharya@gmail.com';\r\nconst SUBJECT = 'User Detail [Test Demo]';\r\n\r\nconst sendEmail = (userDetail) => {\r\n  const mailBody = `\r\n  <div>\r\n    <label>Full Name: </label> ${userDetail.fullName}\r\n    <label>Email Address: </label> ${userDetail.email}\r\n    <label>Gender: </label> ${userDetail.gender}\r\n  </div>\r\n  `;\r\n\r\n  if (window.confirm(\"Send Mail?\")) {\r\n    window.open(`mailto:${TARGET_EMAIL}?subject=${SUBJECT}&body=${mailBody}`);\r\n  }\r\n}\r\n\r\nconst ContactForm = () => {\r\n  const onFormSubmit = (event) => {\r\n    event.preventDefault();\r\n\r\n    sendEmail({\r\n      fullName: event.target.fullName,\r\n      email: event.target.email,\r\n      gender: event.target.gender,\r\n    })\r\n  }\r\n\r\n  return <div className='container'>\r\n    <h1>Contact Form</h1>\r\n    <Form onSubmit={onFormSubmit}>\r\n      <Form.Group controlId=\"userFullName\">\r\n        <Form.Label>Full Name</Form.Label>\r\n        <Form.Control type=\"text\" placeholder=\"Full Name\" name=\"fullName\" />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"userEmailAddress\">\r\n        <Form.Label>Email address</Form.Label>\r\n        <Form.Control type=\"email\" placeholder=\"Enter email\" name=\"email\" />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"userGender\">\r\n        <Form.Label>Gender</Form.Label>\r\n        <div key='inline-radio' className=\"mb-3\">\r\n          <Form.Check inline label=\"Male\" type='radio' id='inline-radio-1' name=\"gender\" />\r\n          <Form.Check inline label=\"Female\" type='radio' id='inline-radio-2' name=\"gender\" />\r\n        </div>\r\n      </Form.Group>\r\n      <Button variant=\"primary\" type=\"submit\">\r\n        Submit\r\n    </Button>\r\n    </Form>\r\n  </div>\r\n}\r\n\r\nexport default ContactForm;\r\n","import React from 'react';\n// import './App.css';\nimport ContactForm from './components/ContactForm';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n      <ContactForm />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}